<module>
	<header>
		<title/>
		<dependencies>
			<import>flua.Core</import>
			<import>flua.Collection.Interface</import>
			<import>flua.Core.Memory</import>
		</dependencies>
		<strings>
			<string as-byte="true" id="flua_string_0">,</string>
			<string as-byte="true" id="flua_string_1">\S</string>
			<string as-byte="true" id="flua_string_2">\n</string>
		</strings>
	</header>
	<code>
		<comment>\SMutable\Svector</comment>
		<class>
			<name>MutableVector</name>
			<code>
				<implements>
					<implements-interface>Collection</implements-interface>
					<implements-interface>Sequence</implements-interface>
				</implements>
				<template>
					<parameter>TDataType</parameter>
				</template>
				<comment>\SInitializes\Sthe\Svector\Swith\Sthe\Sgiven\S#size\Sand\S0\Slength</comment>
				<function>
					<name>init</name>
					<parameters>
						<parameter>
							<assign>
								<value>
									<declare-type>
										<value>size</value>
										<value>Size</value>
									</declare-type>
								</value>
								<value>1024</value>
							</assign>
						</parameter>
					</parameters>
					<code>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>size</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>endOfStorage</value>
								</access>
							</value>
							<value>
								<add>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>size</value>
								</add>
							</value>
						</assign>
					</code>
					<meta/>
				</function>
				<comment>\SInitializes\Sthe\Svector</comment>
				<function>
					<name>init</name>
					<parameters>
						<parameter>
							<access>
								<value>my</value>
								<value>start</value>
							</access>
						</parameter>
						<parameter>
							<access>
								<value>my</value>
								<value>end</value>
							</access>
						</parameter>
						<parameter>
							<access>
								<value>my</value>
								<value>endOfStorage</value>
							</access>
						</parameter>
					</parameters>
					<code>
						<noop/>
					</code>
					<meta/>
				</function>
				<comment>\SFrees\Sthe\Sallocated\Smemory</comment>
				<function>
					<name>finalize</name>
					<code>
						<call>
							<function>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>free</value>
								</access>
							</function>
							<parameters/>
						</call>
					</code>
				</function>
				<comment>\SAdds\San\S#element\Sto\Sthe\Sarray\Sand\Sresizes\Sit\Sif\Sthere\Sis\Snot\Senough\Sspace</comment>
				<function>
					<name>add</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<assign>
							<value>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>end</value>
										</access>
									</value>
									<value>data</value>
								</access>
							</value>
							<value>element</value>
						</assign>
						<assign-add>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>1</value>
						</assign-add>
						<if-block>
							<if>
								<condition>
									<equal>
										<value>
											<access>
												<value>my</value>
												<value>end</value>
											</access>
										</value>
										<value>
											<access>
												<value>my</value>
												<value>endOfStorage</value>
											</access>
										</value>
									</equal>
								</condition>
								<code>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>reserve</value>
											</access>
										</function>
										<parameters>
											<parameter>
												<multiply>
													<value>
														<call>
															<function>
																<access>
																	<value>my</value>
																	<value>getLength</value>
																</access>
															</function>
															<parameters/>
														</call>
													</value>
													<value>4</value>
												</multiply>
											</parameter>
										</parameters>
									</call>
								</code>
							</if>
						</if-block>
					</code>
				</function>
				<comment>\SReserves\Sspace\Sfor\S#newSize\Selements</comment>
				<function>
					<name>reserve</name>
					<parameters>
						<parameter>
							<declare-type>
								<value>newSize</value>
								<value>Size</value>
							</declare-type>
						</parameter>
					</parameters>
					<code>
						<assign>
							<value>currentSize</value>
							<value>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>getLength</value>
										</access>
									</function>
									<parameters/>
								</call>
							</value>
						</assign>
						<assign>
							<value>newMem</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>newSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<call>
							<function>copyMem</function>
							<parameters>
								<parameter>
									<access>
										<value>my</value>
										<value>start</value>
									</access>
								</parameter>
								<parameter>newMem</parameter>
								<parameter>currentSize</parameter>
							</parameters>
						</call>
						<call>
							<function>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>free</value>
								</access>
							</function>
							<parameters/>
						</call>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>currentSize</value>
								</add>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
							<value>newMem</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>endOfStorage</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>newSize</value>
								</add>
							</value>
						</assign>
					</code>
				</function>
				<comment>\STODO:\SImplement\Sthis</comment>
				<function>
					<name>remove</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<noop/>
					</code>
				</function>
				<comment>\SRemoves\Sthe\Sfirst\Selement\Sfrom\Sthe\Svector</comment>
				<function>
					<name>removeFirst</name>
					<code>
						<require>
							<call>
								<function>
									<access>
										<value>my</value>
										<value>hasElements</value>
									</access>
								</function>
								<parameters/>
							</call>
						</require>
						<assign>
							<value>newSize</value>
							<value>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>getSize</value>
										</access>
									</function>
									<parameters/>
								</call>
							</value>
						</assign>
						<assign>
							<value>currentSize</value>
							<value>
								<subtract>
									<value>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>getLength</value>
												</access>
											</function>
											<parameters/>
										</call>
									</value>
									<value>1</value>
								</subtract>
							</value>
						</assign>
						<assign>
							<value>newMem</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>newSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<call>
							<function>copyMem</function>
							<parameters>
								<parameter>
									<add>
										<value>
											<access>
												<value>my</value>
												<value>start</value>
											</access>
										</value>
										<value>1</value>
									</add>
								</parameter>
								<parameter>newMem</parameter>
								<parameter>currentSize</parameter>
							</parameters>
						</call>
						<call>
							<function>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>free</value>
								</access>
							</function>
							<parameters/>
						</call>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>currentSize</value>
								</add>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
							<value>newMem</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>endOfStorage</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>newSize</value>
								</add>
							</value>
						</assign>
					</code>
				</function>
				<comment>\SRemoves\Sthe\Slast\Selement\Sfrom\Sthe\Svector</comment>
				<function>
					<name>removeLast</name>
					<code>
						<require>
							<call>
								<function>
									<access>
										<value>my</value>
										<value>hasElements</value>
									</access>
								</function>
								<parameters/>
							</call>
						</require>
						<assign-subtract>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>1</value>
						</assign-subtract>
					</code>
				</function>
				<comment>\SRemoves\Sthe\Sfirst\Selement\Sfrom\Sthe\Svector\Sand\Sreturns\Sit</comment>
				<function>
					<name>takeFirst</name>
					<code>
						<require>
							<call>
								<function>
									<access>
										<value>my</value>
										<value>hasElements</value>
									</access>
								</function>
								<parameters/>
							</call>
						</require>
						<assign>
							<value>val</value>
							<value>
								<index>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>0</value>
								</index>
							</value>
						</assign>
						<assign>
							<value>newSize</value>
							<value>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>getSize</value>
										</access>
									</function>
									<parameters/>
								</call>
							</value>
						</assign>
						<assign>
							<value>currentSize</value>
							<value>
								<subtract>
									<value>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>getLength</value>
												</access>
											</function>
											<parameters/>
										</call>
									</value>
									<value>1</value>
								</subtract>
							</value>
						</assign>
						<assign>
							<value>newMem</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>newSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<call>
							<function>copyMem</function>
							<parameters>
								<parameter>
									<add>
										<value>
											<access>
												<value>my</value>
												<value>start</value>
											</access>
										</value>
										<value>1</value>
									</add>
								</parameter>
								<parameter>newMem</parameter>
								<parameter>currentSize</parameter>
							</parameters>
						</call>
						<call>
							<function>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>free</value>
								</access>
							</function>
							<parameters/>
						</call>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>currentSize</value>
								</add>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
							<value>newMem</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>endOfStorage</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>newSize</value>
								</add>
							</value>
						</assign>
						<return>val</return>
					</code>
				</function>
				<comment>\SRemoves\Sthe\Slast\Selement\Sfrom\Sthe\Svector\Sand\Sreturns\Sit</comment>
				<function>
					<name>takeLast</name>
					<code>
						<require>
							<call>
								<function>
									<access>
										<value>my</value>
										<value>hasElements</value>
									</access>
								</function>
								<parameters/>
							</call>
						</require>
						<assign-subtract>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>1</value>
						</assign-subtract>
						<return>
							<access>
								<value>
									<access>
										<value>my</value>
										<value>end</value>
									</access>
								</value>
								<value>data</value>
							</access>
						</return>
					</code>
				</function>
				<comment>\SReverses\Sthe\Selements\Sin\Sthe\Svector</comment>
				<function>
					<name>reverse</name>
					<code>
						<assign>
							<value>startRev</value>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
						</assign>
						<assign>
							<value>endRev</value>
							<value>
								<subtract>
									<value>
										<access>
											<value>my</value>
											<value>end</value>
										</access>
									</value>
									<value>1</value>
								</subtract>
							</value>
						</assign>
						<while>
							<condition>
								<greater>
									<value>
										<subtract>
											<value>endRev</value>
											<value>startRev</value>
										</subtract>
									</value>
									<value>0</value>
								</greater>
							</condition>
							<code>
								<call>
									<function>
										<access>
											<value>flua</value>
											<value>swap</value>
										</access>
									</function>
									<parameters>
										<parameter>
											<access>
												<value>startRev</value>
												<value>data</value>
											</access>
										</parameter>
										<parameter>
											<access>
												<value>endRev</value>
												<value>data</value>
											</access>
										</parameter>
									</parameters>
								</call>
								<assign-add>
									<value>startRev</value>
									<value>1</value>
								</assign-add>
								<assign-subtract>
									<value>endRev</value>
									<value>1</value>
								</assign-subtract>
							</code>
						</while>
					</code>
				</function>
				<comment>\SAdds\San\S#element\Sinbetween\Stwo\Ssuccessive\Selements</comment>
				<function>
					<name>interpose</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<assign>
							<value>len</value>
							<value>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>getLength</value>
										</access>
									</function>
									<parameters/>
								</call>
							</value>
						</assign>
						<if-block>
							<if>
								<condition>
									<equal>
										<value>len</value>
										<value>0</value>
									</equal>
								</condition>
								<code>
									<return>
										<new>
											<type>
												<template-call>
													<value>Vector</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters/>
										</new>
									</return>
								</code>
							</if>
						</if-block>
						<assign>
							<value>newSize</value>
							<value>
								<call>
									<function>max</function>
									<parameters>
										<parameter>
											<multiply>
												<value>len</value>
												<value>2</value>
											</multiply>
										</parameter>
										<parameter>
											<call>
												<function>
													<access>
														<value>my</value>
														<value>getSize</value>
													</access>
												</function>
												<parameters/>
											</call>
										</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<assign>
							<value>newMem</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>newSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<for>
							<iterator>i</iterator>
							<from>0</from>
							<until>len</until>
							<code>
								<assign>
									<value>
										<index>
											<value>newMem</value>
											<value>
												<multiply>
													<value>i</value>
													<value>2</value>
												</multiply>
											</value>
										</index>
									</value>
									<value>
										<index>
											<value>
												<access>
													<value>my</value>
													<value>start</value>
												</access>
											</value>
											<value>i</value>
										</index>
									</value>
								</assign>
								<assign>
									<value>
										<index>
											<value>newMem</value>
											<value>
												<add>
													<value>
														<multiply>
															<value>i</value>
															<value>2</value>
														</multiply>
													</value>
													<value>1</value>
												</add>
											</value>
										</index>
									</value>
									<value>element</value>
								</assign>
							</code>
						</for>
						<return>
							<new>
								<type>
									<template-call>
										<value>Vector</value>
										<value>TDataType</value>
									</template-call>
								</type>
								<parameters>
									<parameter>newMem</parameter>
									<parameter>
										<subtract>
											<value>
												<add>
													<value>newMem</value>
													<value>
														<multiply>
															<value>len</value>
															<value>2</value>
														</multiply>
													</value>
												</add>
											</value>
											<value>1</value>
										</subtract>
									</parameter>
									<parameter>
										<add>
											<value>newMem</value>
											<value>newSize</value>
										</add>
									</parameter>
								</parameters>
							</new>
						</return>
					</code>
					<meta/>
				</function>
				<comment>\SReturns\Strue\Sif\Sthe\Svector\Sis\Sempty</comment>
				<function>
					<name>isEmpty</name>
					<code>
						<return>
							<equal>
								<value>
									<access>
										<value>my</value>
										<value>start</value>
									</access>
								</value>
								<value>
									<access>
										<value>my</value>
										<value>end</value>
									</access>
								</value>
							</equal>
						</return>
					</code>
				</function>
				<comment>\SReturns\Strue\Sif\Sthe\Svector\Sis\Snot\Sempty</comment>
				<function>
					<name>hasElements</name>
					<code>
						<return>
							<not-equal>
								<value>
									<access>
										<value>my</value>
										<value>start</value>
									</access>
								</value>
								<value>
									<access>
										<value>my</value>
										<value>end</value>
									</access>
								</value>
							</not-equal>
						</return>
					</code>
				</function>
				<comment>\SReturns\Strue\Sif\Sthe\Svector\Sstarts\Swith\Sthe\Sgiven\S#element</comment>
				<function>
					<name>startsWith</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<require>
							<call>
								<function>
									<access>
										<value>my</value>
										<value>hasElements</value>
									</access>
								</function>
								<parameters/>
							</call>
						</require>
						<return>
							<equal>
								<value>
									<access>
										<value>
											<access>
												<value>my</value>
												<value>start</value>
											</access>
										</value>
										<value>data</value>
									</access>
								</value>
								<value>element</value>
							</equal>
						</return>
					</code>
				</function>
				<comment>\SReturns\Strue\Sif\Sthe\Svector\Sends\Swith\Sthe\Sgiven\S#element</comment>
				<function>
					<name>endsWith</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<require>
							<call>
								<function>
									<access>
										<value>my</value>
										<value>hasElements</value>
									</access>
								</function>
								<parameters/>
							</call>
						</require>
						<return>
							<equal>
								<value>
									<access>
										<value>
											<subtract>
												<value>
													<access>
														<value>my</value>
														<value>end</value>
													</access>
												</value>
												<value>1</value>
											</subtract>
										</value>
										<value>data</value>
									</access>
								</value>
								<value>element</value>
							</equal>
						</return>
					</code>
				</function>
				<comment>\SAdds\S#element\Sto\Sthe\Svector\Sat\Sthe\Sbeginning\Sand\Sat\Sthe\Send</comment>
				<function>
					<name>wrap</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<assign>
							<value>newLen</value>
							<value>
								<add>
									<value>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>getLength</value>
												</access>
											</function>
											<parameters/>
										</call>
									</value>
									<value>2</value>
								</add>
							</value>
						</assign>
						<assign>
							<value>newSize</value>
							<value>
								<call>
									<function>max</function>
									<parameters>
										<parameter>newLen</parameter>
										<parameter>
											<call>
												<function>
													<access>
														<value>my</value>
														<value>getSize</value>
													</access>
												</function>
												<parameters/>
											</call>
										</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<assign>
							<value>newMem</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>newSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<call>
							<function>copyMem</function>
							<parameters>
								<parameter>
									<access>
										<value>my</value>
										<value>start</value>
									</access>
								</parameter>
								<parameter>
									<add>
										<value>newMem</value>
										<value>1</value>
									</add>
								</parameter>
								<parameter>
									<subtract>
										<value>newLen</value>
										<value>2</value>
									</subtract>
								</parameter>
							</parameters>
						</call>
						<assign>
							<value>
								<access>
									<value>newMem</value>
									<value>data</value>
								</access>
							</value>
							<value>element</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>
										<subtract>
											<value>
												<add>
													<value>newMem</value>
													<value>newLen</value>
												</add>
											</value>
											<value>1</value>
										</subtract>
									</value>
									<value>data</value>
								</access>
							</value>
							<value>element</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
							<value>newMem</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>end</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>newLen</value>
								</add>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>endOfStorage</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>newSize</value>
								</add>
							</value>
						</assign>
					</code>
				</function>
				<comment>\SReturns\Swhether\Sthe\Svector\Sstarts\Sand\Sends\Swith\S#element</comment>
				<function>
					<name>wrappedBy</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<return>
							<and>
								<value>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>startsWith</value>
											</access>
										</function>
										<parameters>
											<parameter>element</parameter>
										</parameters>
									</call>
								</value>
								<value>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>endsWith</value>
											</access>
										</function>
										<parameters>
											<parameter>element</parameter>
										</parameters>
									</call>
								</value>
							</and>
						</return>
					</code>
				</function>
				<comment>\SSorts\Sthe\Selements\Sin\Sthe\Svector</comment>
				<function>
					<name>sort</name>
					<parameters>
						<parameter>
							<assign>
								<value>ascending</value>
								<value>true</value>
							</assign>
						</parameter>
						<parameter>
							<assign>
								<value>from</value>
								<value>
									<negative>
										<value>1</value>
									</negative>
								</value>
							</assign>
						</parameter>
						<parameter>
							<assign>
								<value>to</value>
								<value>
									<negative>
										<value>1</value>
									</negative>
								</value>
							</assign>
						</parameter>
					</parameters>
					<code>
						<if-block>
							<if>
								<condition>
									<less-or-equal>
										<value>
											<call>
												<function>
													<access>
														<value>my</value>
														<value>getLength</value>
													</access>
												</function>
												<parameters/>
											</call>
										</value>
										<value>1</value>
									</less-or-equal>
								</condition>
								<code>
									<return/>
								</code>
							</if>
						</if-block>
						<if-block>
							<if>
								<condition>
									<equal>
										<value>from</value>
										<value>
											<negative>
												<value>1</value>
											</negative>
										</value>
									</equal>
								</condition>
								<code>
									<assign>
										<value>from</value>
										<value>0</value>
									</assign>
								</code>
							</if>
						</if-block>
						<if-block>
							<if>
								<condition>
									<equal>
										<value>to</value>
										<value>
											<negative>
												<value>1</value>
											</negative>
										</value>
									</equal>
								</condition>
								<code>
									<assign>
										<value>to</value>
										<value>
											<subtract>
												<value>
													<call>
														<function>
															<access>
																<value>my</value>
																<value>getLength</value>
															</access>
														</function>
														<parameters/>
													</call>
												</value>
												<value>1</value>
											</subtract>
										</value>
									</assign>
								</code>
							</if>
						</if-block>
						<assign>
							<value>pivot</value>
							<value>
								<index>
									<value>my</value>
									<value>
										<divide>
											<value>
												<add>
													<value>from</value>
													<value>to</value>
												</add>
											</value>
											<value>2</value>
										</divide>
									</value>
								</index>
							</value>
						</assign>
						<assign>
							<value>i</value>
							<value>from</value>
						</assign>
						<assign>
							<value>j</value>
							<value>to</value>
						</assign>
						<while>
							<condition>
								<less-or-equal>
									<value>i</value>
									<value>j</value>
								</less-or-equal>
							</condition>
							<code>
								<comment>\STODO:\SCall\S2\Sseparate\Sfunctions\Sdepending\Son\S#ascending</comment>
								<if-block>
									<if>
										<condition>ascending</condition>
										<code>
											<while>
												<condition>
													<less>
														<value>
															<index>
																<value>my</value>
																<value>i</value>
															</index>
														</value>
														<value>pivot</value>
													</less>
												</condition>
												<code>
													<assign-add>
														<value>i</value>
														<value>1</value>
													</assign-add>
												</code>
											</while>
											<while>
												<condition>
													<greater>
														<value>
															<index>
																<value>my</value>
																<value>j</value>
															</index>
														</value>
														<value>pivot</value>
													</greater>
												</condition>
												<code>
													<assign-subtract>
														<value>j</value>
														<value>1</value>
													</assign-subtract>
												</code>
											</while>
										</code>
									</if>
									<else>
										<code>
											<while>
												<condition>
													<greater>
														<value>
															<index>
																<value>my</value>
																<value>i</value>
															</index>
														</value>
														<value>pivot</value>
													</greater>
												</condition>
												<code>
													<assign-add>
														<value>i</value>
														<value>1</value>
													</assign-add>
												</code>
											</while>
											<while>
												<condition>
													<less>
														<value>
															<index>
																<value>my</value>
																<value>j</value>
															</index>
														</value>
														<value>pivot</value>
													</less>
												</condition>
												<code>
													<assign-subtract>
														<value>j</value>
														<value>1</value>
													</assign-subtract>
												</code>
											</while>
										</code>
									</else>
								</if-block>
								<if-block>
									<if>
										<condition>
											<less-or-equal>
												<value>i</value>
												<value>j</value>
											</less-or-equal>
										</condition>
										<code>
											<comment>\STODO:\SReplace\Swith\Sswap</comment>
											<assign>
												<value>tmp</value>
												<value>
													<index>
														<value>my</value>
														<value>i</value>
													</index>
												</value>
											</assign>
											<assign>
												<value>
													<index>
														<value>my</value>
														<value>i</value>
													</index>
												</value>
												<value>
													<index>
														<value>my</value>
														<value>j</value>
													</index>
												</value>
											</assign>
											<assign>
												<value>
													<index>
														<value>my</value>
														<value>j</value>
													</index>
												</value>
												<value>tmp</value>
											</assign>
											<assign-add>
												<value>i</value>
												<value>1</value>
											</assign-add>
											<assign-subtract>
												<value>j</value>
												<value>1</value>
											</assign-subtract>
										</code>
									</if>
								</if-block>
							</code>
						</while>
						<if-block>
							<if>
								<condition>
									<less>
										<value>from</value>
										<value>j</value>
									</less>
								</condition>
								<code>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>sort</value>
											</access>
										</function>
										<parameters>
											<parameter>ascending</parameter>
											<parameter>from</parameter>
											<parameter>j</parameter>
										</parameters>
									</call>
								</code>
							</if>
						</if-block>
						<if-block>
							<if>
								<condition>
									<less>
										<value>j</value>
										<value>to</value>
									</less>
								</condition>
								<code>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>sort</value>
											</access>
										</function>
										<parameters>
											<parameter>ascending</parameter>
											<parameter>i</parameter>
											<parameter>to</parameter>
										</parameters>
									</call>
								</code>
							</if>
						</if-block>
					</code>
				</function>
				<comment>\SWrites\Seach\Selement\Sof\S#vec\Sseparated\Sby\Scommas</comment>
				<function>
					<name>print</name>
					<code>
						<assign>
							<value>ptr</value>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
						</assign>
						<while>
							<condition>
								<not-equal>
									<value>ptr</value>
									<value>
										<access>
											<value>my</value>
											<value>end</value>
										</access>
									</value>
								</not-equal>
							</condition>
							<code>
								<if-block>
									<if>
										<condition>
											<not-equal>
												<value>ptr</value>
												<value>
													<access>
														<value>my</value>
														<value>start</value>
													</access>
												</value>
											</not-equal>
										</condition>
										<code>
											<call>
												<function>write</function>
												<parameters>
													<parameter>flua_string_0</parameter>
												</parameters>
											</call>
											<call>
												<function>write</function>
												<parameters>
													<parameter>flua_string_1</parameter>
												</parameters>
											</call>
										</code>
									</if>
								</if-block>
								<call>
									<function>write</function>
									<parameters>
										<parameter>
											<access>
												<value>ptr</value>
												<value>data</value>
											</access>
										</parameter>
									</parameters>
								</call>
								<assign-add>
									<value>ptr</value>
									<value>1</value>
								</assign-add>
							</code>
						</while>
						<call>
							<function>write</function>
							<parameters>
								<parameter>flua_string_2</parameter>
							</parameters>
						</call>
					</code>
				</function>
				<comment>\SReturns\Strue\Sif\S#element\Sis\Spart\Sof\Sthe\Svector,\Sfalse\Sotherwise.</comment>
				<comment>\SO(n)</comment>
				<function>
					<name>contains</name>
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<code>
						<foreach>
							<iterator>el</iterator>
							<collection>my</collection>
							<code>
								<if-block>
									<if>
										<condition>
											<equal>
												<value>el</value>
												<value>element</value>
											</equal>
										</condition>
										<code>
											<return>true</return>
										</code>
									</if>
								</if-block>
							</code>
						</foreach>
						<return>false</return>
					</code>
				</function>
				<operators>
					<comment>\SRetrieves\Sthe\Selement\Sat\Sposition\S#index</comment>
					<operator>
						<name>[]</name>
						<parameters>
							<parameter>index</parameter>
						</parameters>
						<code>
							<require>
								<greater-or-equal>
									<value>index</value>
									<value>0</value>
								</greater-or-equal>
								<less>
									<value>index</value>
									<value>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>getLength</value>
												</access>
											</function>
											<parameters/>
										</call>
									</value>
								</less>
							</require>
							<return>
								<index>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>index</value>
								</index>
							</return>
						</code>
					</operator>
					<comment>\SSets\Sthe\Selement\Sat\Sposition\S#index\Sto\S#value</comment>
					<operator>
						<name>[]=</name>
						<parameters>
							<parameter>index</parameter>
							<parameter>value</parameter>
						</parameters>
						<code>
							<require>
								<greater-or-equal>
									<value>index</value>
									<value>0</value>
								</greater-or-equal>
								<less>
									<value>index</value>
									<value>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>getLength</value>
												</access>
											</function>
											<parameters/>
										</call>
									</value>
								</less>
							</require>
							<assign>
								<value>
									<index>
										<value>
											<access>
												<value>my</value>
												<value>start</value>
											</access>
										</value>
										<value>index</value>
									</index>
								</value>
								<value>value</value>
							</assign>
						</code>
					</operator>
					<comment>\SCreates\Sa\Snew\Svector\Swith\Selements\Sof\Sboth\Scollections</comment>
					<operator>
						<name>+</name>
						<parameters>
							<parameter>collection</parameter>
						</parameters>
						<code>
							<assign>
								<value>ptr</value>
								<value>
									<access>
										<value>my</value>
										<value>start</value>
									</access>
								</value>
							</assign>
							<assign>
								<value>newVec</value>
								<value>
									<new>
										<type>
											<template-call>
												<value>Vector</value>
												<value>TDataType</value>
											</template-call>
										</type>
										<parameters/>
									</new>
								</value>
							</assign>
							<while>
								<condition>
									<not-equal>
										<value>ptr</value>
										<value>
											<access>
												<value>my</value>
												<value>end</value>
											</access>
										</value>
									</not-equal>
								</condition>
								<code>
									<call>
										<function>
											<access>
												<value>newVec</value>
												<value>add</value>
											</access>
										</function>
										<parameters>
											<parameter>
												<access>
													<value>ptr</value>
													<value>data</value>
												</access>
											</parameter>
										</parameters>
									</call>
									<assign-add>
										<value>ptr</value>
										<value>1</value>
									</assign-add>
								</code>
							</while>
							<foreach>
								<iterator>x</iterator>
								<collection>collection</collection>
								<code>
									<call>
										<function>
											<access>
												<value>newVec</value>
												<value>add</value>
											</access>
										</function>
										<parameters>
											<parameter>x</parameter>
										</parameters>
									</call>
								</code>
							</foreach>
							<return>newVec</return>
						</code>
					</operator>
					<comment>\SReturns\Sa\Svector\Swhich\Sonly\Scontains\Selements\Sexisting\Sin\S#collection\T\T#\Sand\Sthe\Scalling\Svector\Sitself.</comment>
					<operator>
						<name>&amp;</name>
						<parameters>
							<parameter>collection</parameter>
						</parameters>
						<code>
							<assign>
								<value>result</value>
								<value>
									<new>
										<type>
											<template-call>
												<value>Vector</value>
												<value>TDataType</value>
											</template-call>
										</type>
										<parameters>
											<parameter>
												<call>
													<function>
														<access>
															<value>my</value>
															<value>getLength</value>
														</access>
													</function>
													<parameters/>
												</call>
											</parameter>
										</parameters>
									</new>
								</value>
							</assign>
							<foreach>
								<iterator>x</iterator>
								<collection>my</collection>
								<code>
									<if-block>
										<if>
											<condition>
												<exists-in>
													<value>x</value>
													<value>collection</value>
												</exists-in>
											</condition>
											<code>
												<call>
													<function>
														<access>
															<value>result</value>
															<value>add</value>
														</access>
													</function>
													<parameters>
														<parameter>x</parameter>
													</parameters>
												</call>
											</code>
										</if>
									</if-block>
								</code>
							</foreach>
							<return>result</return>
						</code>
					</operator>
					<comment>\SReturns\Sa\Svector\Swhich\Sonly\Scontains\Selements\Sexisting\Sin\Sthe\Scalling\Svector\T\T#\Sbut\Snot\Sin\Sthe\S#collection.\T\T#\SO(n\S*\Sm)</comment>
					<operator>
						<name>-</name>
						<parameters>
							<parameter>collection</parameter>
						</parameters>
						<code>
							<assign>
								<value>result</value>
								<value>
									<new>
										<type>
											<template-call>
												<value>Vector</value>
												<value>TDataType</value>
											</template-call>
										</type>
										<parameters>
											<parameter>
												<call>
													<function>
														<access>
															<value>my</value>
															<value>getLength</value>
														</access>
													</function>
													<parameters/>
												</call>
											</parameter>
										</parameters>
									</new>
								</value>
							</assign>
							<foreach>
								<iterator>x</iterator>
								<collection>my</collection>
								<code>
									<if-block>
										<if>
											<condition>
												<not>
													<value>
														<exists-in>
															<value>x</value>
															<value>collection</value>
														</exists-in>
													</value>
												</not>
											</condition>
											<code>
												<call>
													<function>
														<access>
															<value>result</value>
															<value>add</value>
														</access>
													</function>
													<parameters>
														<parameter>x</parameter>
													</parameters>
												</call>
											</code>
										</if>
									</if-block>
								</code>
							</foreach>
							<return>result</return>
						</code>
					</operator>
				</operators>
				<iterators>
					<iterator-type>
						<name>default</name>
						<code>
							<assign>
								<value>ptr</value>
								<value>
									<access>
										<value>my</value>
										<value>start</value>
									</access>
								</value>
							</assign>
							<while>
								<condition>
									<not-equal>
										<value>ptr</value>
										<value>
											<access>
												<value>my</value>
												<value>end</value>
											</access>
										</value>
									</not-equal>
								</condition>
								<code>
									<yield>
										<access>
											<value>ptr</value>
											<value>data</value>
										</access>
									</yield>
									<assign-add>
										<value>ptr</value>
										<value>1</value>
									</assign-add>
								</code>
							</while>
						</code>
					</iterator-type>
				</iterators>
				<get>
					<getter>
						<name>length</name>
						<code>
							<ensure>
								<greater-or-equal>
									<value>result</value>
									<value>0</value>
								</greater-or-equal>
							</ensure>
							<return>
								<subtract>
									<value>
										<access>
											<value>my</value>
											<value>end</value>
										</access>
									</value>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
								</subtract>
							</return>
						</code>
					</getter>
					<getter>
						<name>size</name>
						<code>
							<ensure>
								<greater-or-equal>
									<value>result</value>
									<value>0</value>
								</greater-or-equal>
							</ensure>
							<return>
								<subtract>
									<value>
										<access>
											<value>my</value>
											<value>endOfStorage</value>
										</access>
									</value>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
								</subtract>
							</return>
						</code>
					</getter>
					<getter>
						<name>data</name>
						<code>
							<return>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</return>
						</code>
					</getter>
					<getter>
						<name>first</name>
						<code>
							<require>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>hasElements</value>
										</access>
									</function>
									<parameters/>
								</call>
							</require>
							<return>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>data</value>
								</access>
							</return>
						</code>
					</getter>
					<getter>
						<name>last</name>
						<code>
							<require>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>hasElements</value>
										</access>
									</function>
									<parameters/>
								</call>
							</require>
							<return>
								<access>
									<value>
										<subtract>
											<value>
												<access>
													<value>my</value>
													<value>end</value>
												</access>
											</value>
											<value>1</value>
										</subtract>
									</value>
									<value>data</value>
								</access>
							</return>
						</code>
					</getter>
				</get>
				<set>
					<setter>
						<name>length</name>
						<parameters>
							<parameter>newLength</parameter>
						</parameters>
						<code>
							<require>
								<greater-or-equal>
									<value>newLength</value>
									<value>0</value>
								</greater-or-equal>
							</require>
							<assign>
								<value>
									<access>
										<value>my</value>
										<value>end</value>
									</access>
								</value>
								<value>
									<add>
										<value>
											<access>
												<value>my</value>
												<value>start</value>
											</access>
										</value>
										<value>newLength</value>
									</add>
								</value>
							</assign>
							<if-block>
								<if>
									<condition>
										<greater-or-equal>
											<value>
												<access>
													<value>my</value>
													<value>end</value>
												</access>
											</value>
											<value>
												<access>
													<value>my</value>
													<value>endOfStorage</value>
												</access>
											</value>
										</greater-or-equal>
									</condition>
									<code>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>reserve</value>
												</access>
											</function>
											<parameters>
												<parameter>
													<multiply>
														<value>
															<call>
																<function>
																	<access>
																		<value>my</value>
																		<value>getLength</value>
																	</access>
																</function>
																<parameters/>
															</call>
														</value>
														<value>4</value>
													</multiply>
												</parameter>
											</parameters>
										</call>
									</code>
								</if>
							</if-block>
						</code>
					</setter>
				</set>
			</code>
			<meta>
				<ensure-destructor-call>true</ensure-destructor-call>
				<force-implementation>false</force-implementation>
				<default-class-version>true</default-class-version>
			</meta>
		</class>
		<comment>\SAdd\Sanother\Sconstructor\Sto\SUTF8String</comment>
		<class>
			<name>UTF8String</name>
			<code>
				<comment>\SInit\Sfrom\Sbyte\Svector</comment>
				<function>
					<name>init</name>
					<parameters>
						<parameter>
							<declare-type>
								<value>bytes</value>
								<value>
									<template-call>
										<value>Vector</value>
										<value>Byte</value>
									</template-call>
								</value>
							</declare-type>
						</parameter>
					</parameters>
					<code>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>data</value>
								</access>
							</value>
							<value>
								<new>
									<type>
										<template-call>
											<value>MemPointer</value>
											<value>Byte</value>
										</template-call>
									</type>
									<parameters>
										<parameter>
											<access>
												<value>bytes</value>
												<value>length</value>
											</access>
										</parameter>
									</parameters>
								</new>
							</value>
						</assign>
						<call>
							<function>copyMem</function>
							<parameters>
								<parameter>
									<access>
										<value>bytes</value>
										<value>data</value>
									</access>
								</parameter>
								<parameter>
									<access>
										<value>my</value>
										<value>data</value>
									</access>
								</parameter>
								<parameter>
									<access>
										<value>bytes</value>
										<value>length</value>
									</access>
								</parameter>
							</parameters>
						</call>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>lengthInBytes</value>
								</access>
							</value>
							<value>
								<access>
									<value>bytes</value>
									<value>length</value>
								</access>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>length</value>
								</access>
							</value>
							<value>
								<call>
									<function>
										<access>
											<value>flua</value>
											<value>strlenUtf8</value>
										</access>
									</function>
									<parameters>
										<parameter>
											<access>
												<value>my</value>
												<value>data</value>
											</access>
										</parameter>
									</parameters>
								</call>
							</value>
						</assign>
					</code>
				</function>
			</code>
		</class>
	</code>
</module>
