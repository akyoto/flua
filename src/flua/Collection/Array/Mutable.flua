<module>
	<header>
		<title/>
		<dependencies>
			<import>flua.Core</import>
			<import>flua.Collection.Interface</import>
			<import>flua.Core.Memory</import>
			<import>flua.Math</import>
		</dependencies>
		<strings/>
	</header>
	<code>
		<comment>\SMutable\Sarray</comment>
		<class>
			<name>MutableArray</name>
			<code>
				<implements>
					<implements-interface>Collection</implements-interface>
				</implements>
				<template>
					<parameter>TDataType</parameter>
				</template>
				<function>
					<name>init</name>
					<parameters>
						<parameter>
							<declare-type>
								<value>size</value>
								<value>Size</value>
							</declare-type>
						</parameter>
					</parameters>
					<code>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>size</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>size</value>
								</access>
							</value>
							<value>size</value>
						</assign>
					</code>
					<meta/>
				</function>
				<function>
					<name>finalize</name>
					<code>
						<call>
							<function>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>free</value>
								</access>
							</function>
							<parameters/>
						</call>
					</code>
					<meta/>
				</function>
				<comment>\STODO:\SFix\Sthis</comment>
				<function>
					<name>resize</name>
					<parameters>
						<parameter>
							<declare-type>
								<value>newSize</value>
								<value>Size</value>
							</declare-type>
						</parameter>
					</parameters>
					<code>
						<assign>
							<value>newMem</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>newSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<call>
							<function>copyMem</function>
							<parameters>
								<parameter>
									<access>
										<value>my</value>
										<value>start</value>
									</access>
								</parameter>
								<parameter>newMem</parameter>
								<parameter>
									<call>
										<function>min</function>
										<parameters>
											<parameter>newSize</parameter>
											<parameter>
												<access>
													<value>my</value>
													<value>size</value>
												</access>
											</parameter>
										</parameters>
									</call>
								</parameter>
							</parameters>
						</call>
						<call>
							<function>
								<access>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>free</value>
								</access>
							</function>
							<parameters/>
						</call>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
							<value>newMem</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>size</value>
								</access>
							</value>
							<value>newSize</value>
						</assign>
					</code>
					<meta/>
				</function>
				<function>
					<name>reverse</name>
					<code>
						<assign>
							<value>startRev</value>
							<value>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</value>
						</assign>
						<assign>
							<value>endRev</value>
							<value>
								<subtract>
									<value>
										<access>
											<value>my</value>
											<value>end</value>
										</access>
									</value>
									<value>1</value>
								</subtract>
							</value>
						</assign>
						<while>
							<condition>
								<greater>
									<value>
										<subtract>
											<value>endRev</value>
											<value>startRev</value>
										</subtract>
									</value>
									<value>0</value>
								</greater>
							</condition>
							<code>
								<call>
									<function>
										<access>
											<value>flua</value>
											<value>swap</value>
										</access>
									</function>
									<parameters>
										<parameter>
											<access>
												<value>startRev</value>
												<value>data</value>
											</access>
										</parameter>
										<parameter>
											<access>
												<value>endRev</value>
												<value>data</value>
											</access>
										</parameter>
									</parameters>
								</call>
								<assign-add>
									<value>startRev</value>
									<value>1</value>
								</assign-add>
								<assign-subtract>
									<value>endRev</value>
									<value>1</value>
								</assign-subtract>
							</code>
						</while>
					</code>
					<meta/>
				</function>
				<operators>
					<comment>\SRetrieve\Sthe\Svalue\Sfrom\Sthe\Sarray\Sfor\Sthe\Sgiven\S#index</comment>
					<operator>
						<name>[]</name>
						<parameters>
							<parameter>index</parameter>
						</parameters>
						<code>
							<require>
								<greater-or-equal>
									<value>index</value>
									<value>0</value>
								</greater-or-equal>
								<less>
									<value>index</value>
									<value>
										<access>
											<value>my</value>
											<value>size</value>
										</access>
									</value>
								</less>
							</require>
							<return>
								<index>
									<value>
										<access>
											<value>my</value>
											<value>start</value>
										</access>
									</value>
									<value>index</value>
								</index>
							</return>
						</code>
					</operator>
					<comment>\SSets\Sthe\Selement\Sat\Sposition\S#index\Sto\S#value</comment>
					<operator>
						<name>[]=</name>
						<parameters>
							<parameter>index</parameter>
							<parameter>value</parameter>
						</parameters>
						<code>
							<require>
								<greater-or-equal>
									<value>index</value>
									<value>0</value>
								</greater-or-equal>
								<less>
									<value>index</value>
									<value>
										<access>
											<value>my</value>
											<value>size</value>
										</access>
									</value>
								</less>
							</require>
							<assign>
								<value>
									<index>
										<value>
											<access>
												<value>my</value>
												<value>start</value>
											</access>
										</value>
										<value>index</value>
									</index>
								</value>
								<value>value</value>
							</assign>
						</code>
					</operator>
				</operators>
				<iterators>
					<iterator-type>
						<name>default</name>
						<code>
							<assign>
								<value>pos</value>
								<value>0</value>
							</assign>
							<assign>
								<value>end</value>
								<value>
									<access>
										<value>my</value>
										<value>size</value>
									</access>
								</value>
							</assign>
							<while>
								<condition>
									<less>
										<value>pos</value>
										<value>end</value>
									</less>
								</condition>
								<code>
									<yield>
										<index>
											<value>
												<access>
													<value>my</value>
													<value>start</value>
												</access>
											</value>
											<value>pos</value>
										</index>
									</yield>
									<assign-add>
										<value>pos</value>
										<value>1</value>
									</assign-add>
								</code>
							</while>
						</code>
					</iterator-type>
				</iterators>
				<get>
					<getter>
						<name>length</name>
						<code>
							<ensure>
								<greater-or-equal>
									<value>result</value>
									<value>0</value>
								</greater-or-equal>
							</ensure>
							<return>
								<access>
									<value>my</value>
									<value>size</value>
								</access>
							</return>
						</code>
					</getter>
					<getter>
						<name>size</name>
						<code>
							<ensure>
								<greater-or-equal>
									<value>result</value>
									<value>0</value>
								</greater-or-equal>
							</ensure>
							<return>
								<access>
									<value>my</value>
									<value>size</value>
								</access>
							</return>
						</code>
					</getter>
					<getter>
						<name>data</name>
						<code>
							<return>
								<access>
									<value>my</value>
									<value>start</value>
								</access>
							</return>
						</code>
					</getter>
				</get>
			</code>
			<meta>
				<ensure-destructor-call>true</ensure-destructor-call>
				<default-class-version>true</default-class-version>
				<force-implementation>false</force-implementation>
			</meta>
		</class>
		<comment>\SAdd\Sanother\Sconstructor\Sto\SUTF8String</comment>
		<class>
			<name>UTF8String</name>
			<code>
				<comment>\SInit\Sfrom\Sbyte\Sarray</comment>
				<function>
					<name>init</name>
					<parameters>
						<parameter>
							<declare-type>
								<value>bytes</value>
								<value>
									<template-call>
										<value>Array</value>
										<value>Byte</value>
									</template-call>
								</value>
							</declare-type>
						</parameter>
					</parameters>
					<code>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>data</value>
								</access>
							</value>
							<value>
								<new>
									<type>
										<template-call>
											<value>MemPointer</value>
											<value>Byte</value>
										</template-call>
									</type>
									<parameters>
										<parameter>
											<access>
												<value>bytes</value>
												<value>length</value>
											</access>
										</parameter>
									</parameters>
								</new>
							</value>
						</assign>
						<call>
							<function>copyMem</function>
							<parameters>
								<parameter>
									<access>
										<value>bytes</value>
										<value>data</value>
									</access>
								</parameter>
								<parameter>
									<access>
										<value>my</value>
										<value>data</value>
									</access>
								</parameter>
								<parameter>
									<access>
										<value>bytes</value>
										<value>length</value>
									</access>
								</parameter>
							</parameters>
						</call>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>lengthInBytes</value>
								</access>
							</value>
							<value>
								<access>
									<value>bytes</value>
									<value>length</value>
								</access>
							</value>
						</assign>
						<assign>
							<value>
								<access>
									<value>my</value>
									<value>length</value>
								</access>
							</value>
							<value>
								<call>
									<function>
										<access>
											<value>flua</value>
											<value>strlenUtf8</value>
										</access>
									</function>
									<parameters>
										<parameter>
											<access>
												<value>my</value>
												<value>data</value>
											</access>
										</parameter>
									</parameters>
								</call>
							</value>
						</assign>
					</code>
				</function>
			</code>
		</class>
	</code>
</module>
