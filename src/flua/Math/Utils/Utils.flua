<module>
	<header>
		<title/>
		<dependencies>
			<import>flua.Core</import>
			<import>Range</import>
		</dependencies>
		<strings/>
	</header>
	<code>
		<comment>\SCalculates\Sthe\Sfactorial\Sof\Sn\Srecursively</comment>
		<function>
			<name>factorial</name>
			<parameters>
				<parameter>n</parameter>
			</parameters>
			<code>
				<require>
					<greater-or-equal>
						<value>n</value>
						<value>0</value>
					</greater-or-equal>
				</require>
				<ensure>
					<greater>
						<value>result</value>
						<value>0</value>
					</greater>
				</ensure>
				<test>
					<code>
						<assert>
							<equal>
								<value>
									<call>
										<function>factorial</function>
										<parameters>
											<parameter>0</parameter>
										</parameters>
									</call>
								</value>
								<value>1</value>
							</equal>
						</assert>
						<assert>
							<equal>
								<value>
									<call>
										<function>factorial</function>
										<parameters>
											<parameter>10</parameter>
										</parameters>
									</call>
								</value>
								<value>3628800</value>
							</equal>
						</assert>
						<assert>
							<equal>
								<value>
									<call>
										<function>factorial</function>
										<parameters>
											<parameter>20</parameter>
										</parameters>
									</call>
								</value>
								<value>2432902008176640000</value>
							</equal>
						</assert>
					</code>
				</test>
				<if-block>
					<if>
						<condition>
							<equal>
								<value>n</value>
								<value>0</value>
							</equal>
						</condition>
						<code>
							<return>1</return>
						</code>
					</if>
				</if-block>
				<return>
					<multiply>
						<value>n</value>
						<value>
							<call>
								<function>factorial</function>
								<parameters>
									<parameter>
										<subtract>
											<value>n</value>
											<value>1</value>
										</subtract>
									</parameter>
								</parameters>
							</call>
						</value>
					</multiply>
				</return>
			</code>
			<meta/>
		</function>
		<comment>\SReturns\Strue\Sif\S#x\Sis\Sa\Spower\Sof\S2,\Sfalse\Sotherwise</comment>
		<function>
			<name>isPowerOf2</name>
			<parameters>
				<parameter>x</parameter>
			</parameters>
			<code>
				<return>
					<and>
						<value>x</value>
						<value>
							<not>
								<value>
									<bitwise-and>
										<value>x</value>
										<value>
											<subtract>
												<value>x</value>
												<value>1</value>
											</subtract>
										</value>
									</bitwise-and>
								</value>
							</not>
						</value>
					</and>
				</return>
			</code>
		</function>
		<comment>\SReturns\Strue\Sif\S#x\Sis\Sodd,\Sfalse\Sotherwise</comment>
		<function>
			<name>isOdd</name>
			<parameters>
				<parameter>x</parameter>
			</parameters>
			<code>
				<return>
					<not-equal>
						<value>
							<modulo>
								<value>x</value>
								<value>2</value>
							</modulo>
						</value>
						<value>0</value>
					</not-equal>
				</return>
			</code>
		</function>
		<comment>\SReturn\Strue\Sif\S#x\Sis\Seven,\Sfalse\Sotherwise</comment>
		<function>
			<name>isEven</name>
			<parameters>
				<parameter>x</parameter>
			</parameters>
			<code>
				<return>
					<equal>
						<value>
							<modulo>
								<value>x</value>
								<value>2</value>
							</modulo>
						</value>
						<value>0</value>
					</equal>
				</return>
			</code>
		</function>
	</code>
</module>
