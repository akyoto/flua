<module>
	<header>
		<title/>
		<dependencies>
			<import>flua.Core</import>
			<import>flua.Collection.Map</import>
		</dependencies>
		<strings>
			<string id="flua_string_0">\S</string>
			<string as-byte="true" id="flua_string_1">(</string>
			<string id="flua_string_2">*</string>
			<string id="flua_string_3">multiply</string>
			<string id="flua_string_4">+</string>
			<string id="flua_string_5">add</string>
			<string id="flua_string_6">*</string>
			<string id="flua_string_7">+</string>
			<string id="flua_string_8">(</string>
			<string id="flua_string_9">)</string>
			<string id="flua_string_10">(12\S+\S34)\S*\S56</string>
			<string id="flua_string_11">\Snot\Sfound.</string>
		</strings>
	</header>
	<code>
		<comment>\SCreates\San\SXML\Stree\Sout\Sof\Sa\Sstring\Sexpression</comment>
		<function>
			<name>parseExpr</name>
			<parameters>
				<parameter>expr</parameter>
				<parameter>occurences</parameter>
			</parameters>
			<code>
				<call>
					<function>
						<access>
							<value>expr</value>
							<value>erase</value>
						</access>
					</function>
					<parameters>
						<parameter>flua_string_0</parameter>
					</parameters>
				</call>
				<assign>
					<value>start</value>
					<value>
						<negative>
							<value>1</value>
						</negative>
					</value>
				</assign>
				<foreach>
					<counter>pos</counter>
					<iterator>x</iterator>
					<collection>
						<access>
							<value>expr</value>
							<value>bytes</value>
						</access>
					</collection>
					<code>
						<if-block>
							<if>
								<condition>
									<not>
										<value>
											<call>
												<function>isAlnum</function>
												<parameters>
													<parameter>x</parameter>
												</parameters>
											</call>
										</value>
									</not>
								</condition>
								<code>
									<if-block>
										<if>
											<condition>
												<equal>
													<value>x</value>
													<value>flua_string_1</value>
												</equal>
											</condition>
											<code>
												<noop/>
											</code>
										</if>
									</if-block>
									<if-block>
										<if>
											<condition>
												<equal>
													<value>start</value>
													<value>
														<negative>
															<value>1</value>
														</negative>
													</value>
												</equal>
											</condition>
											<code>
												<assign>
													<value>start</value>
													<value>pos</value>
												</assign>
											</code>
										</if>
									</if-block>
								</code>
							</if>
							<else>
								<code>
									<if-block>
										<if>
											<condition>
												<not-equal>
													<value>start</value>
													<value>
														<negative>
															<value>1</value>
														</negative>
													</value>
												</not-equal>
											</condition>
											<code>
												<assign>
													<value>op</value>
													<value>
														<call>
															<function>
																<access>
																	<value>expr</value>
																	<value>substrBytes</value>
																</access>
															</function>
															<parameters>
																<parameter>start</parameter>
																<parameter>pos</parameter>
															</parameters>
														</call>
													</value>
												</assign>
												<call>
													<function>
														<access>
															<value>
																<index>
																	<value>occurences</value>
																	<value>op</value>
																</index>
															</value>
															<value>add</value>
														</access>
													</function>
													<parameters>
														<parameter>start</parameter>
													</parameters>
												</call>
												<assign>
													<value>start</value>
													<value>
														<negative>
															<value>1</value>
														</negative>
													</value>
												</assign>
											</code>
										</if>
									</if-block>
								</code>
							</else>
						</if-block>
					</code>
				</foreach>
				<return>expr</return>
			</code>
			<meta/>
		</function>
		<comment>\SReturns\Sthe\Sleft\Soperator</comment>
		<function>
			<name>getLeftOperator</name>
			<parameters>
				<parameter>expr</parameter>
				<parameter>occ</parameter>
			</parameters>
			<code>
				<assign>
					<value>pos</value>
					<value>occ</value>
				</assign>
				<assign-subtract>
					<value>pos</value>
					<value>1</value>
				</assign-subtract>
				<while>
					<condition>
						<call>
							<function>isAlnum</function>
							<parameters>
								<parameter>
									<index>
										<value>
											<access>
												<value>expr</value>
												<value>data</value>
											</access>
										</value>
										<value>pos</value>
									</index>
								</parameter>
							</parameters>
						</call>
					</condition>
					<code>
						<assign-subtract>
							<value>pos</value>
							<value>1</value>
						</assign-subtract>
					</code>
				</while>
				<return>
					<call>
						<function>
							<access>
								<value>expr</value>
								<value>substrBytes</value>
							</access>
						</function>
						<parameters>
							<parameter>
								<add>
									<value>pos</value>
									<value>1</value>
								</add>
							</parameter>
							<parameter>occ</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<comment>\SReturns\Sthe\Sright\Soperator</comment>
		<function>
			<name>getRightOperator</name>
			<parameters>
				<parameter>expr</parameter>
				<parameter>occ</parameter>
			</parameters>
			<code>
				<assign>
					<value>pos</value>
					<value>occ</value>
				</assign>
				<assign-add>
					<value>pos</value>
					<value>1</value>
				</assign-add>
				<while>
					<condition>
						<call>
							<function>isAlnum</function>
							<parameters>
								<parameter>
									<index>
										<value>
											<access>
												<value>expr</value>
												<value>data</value>
											</access>
										</value>
										<value>pos</value>
									</index>
								</parameter>
							</parameters>
						</call>
					</condition>
					<code>
						<assign-add>
							<value>pos</value>
							<value>1</value>
						</assign-add>
					</code>
				</while>
				<return>
					<call>
						<function>
							<access>
								<value>expr</value>
								<value>substrBytes</value>
							</access>
						</function>
						<parameters>
							<parameter>occ</parameter>
							<parameter>pos</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<comment>\SOperator</comment>
		<class>
			<name>Operator</name>
			<code>
				<function>
					<name>init</name>
					<parameters>
						<parameter>
							<access>
								<value>my</value>
								<value>text</value>
							</access>
						</parameter>
						<parameter>
							<access>
								<value>my</value>
								<value>nodeName</value>
							</access>
						</parameter>
					</parameters>
					<code>
						<noop/>
					</code>
				</function>
				<get>
					<getter>
						<name>text</name>
						<code>
							<return>
								<access>
									<value>my</value>
									<value>text</value>
								</access>
							</return>
						</code>
					</getter>
				</get>
			</code>
		</class>
		<comment>\SUsage\Sexample</comment>
		<test>
			<code>
				<assign>
					<value>mulOP</value>
					<value>
						<new>
							<type>Operator</type>
							<parameters>
								<parameter>flua_string_2</parameter>
								<parameter>flua_string_3</parameter>
							</parameters>
						</new>
					</value>
				</assign>
				<assign>
					<value>addOP</value>
					<value>
						<new>
							<type>Operator</type>
							<parameters>
								<parameter>flua_string_4</parameter>
								<parameter>flua_string_5</parameter>
							</parameters>
						</new>
					</value>
				</assign>
				<comment>leftBracket\S=\SOperator(&quot;(&quot;,\S&quot;call&quot;)</comment>
				<comment>\SSave\Sthe\Slevels</comment>
				<assign>
					<value>opLevels</value>
					<value>
						<index>
							<value>_flua_seq</value>
							<value>
								<parameters>
									<parameter>
										<index>
											<value>_flua_seq</value>
											<value>mulOP</value>
										</index>
									</parameter>
									<parameter>
										<index>
											<value>_flua_seq</value>
											<value>addOP</value>
										</index>
									</parameter>
								</parameters>
							</value>
						</index>
					</value>
				</assign>
				<comment>\SOccurences\Sof\Sthe\Soperators</comment>
				<assign>
					<value>occurences</value>
					<value>
						<new>
							<type>
								<template-call>
									<value>Map</value>
									<value>
										<parameters>
											<parameter>String</parameter>
											<parameter>
												<template-call>
													<value>Vector</value>
													<value>Int</value>
												</template-call>
											</parameter>
										</parameters>
									</value>
								</template-call>
							</type>
							<parameters/>
						</new>
					</value>
				</assign>
				<foreach>
					<iterator>x</iterator>
					<collection>
						<index>
							<value>_flua_seq</value>
							<value>
								<parameters>
									<parameter>flua_string_6</parameter>
									<parameter>flua_string_7</parameter>
									<parameter>flua_string_8</parameter>
									<parameter>flua_string_9</parameter>
								</parameters>
							</value>
						</index>
					</collection>
					<code>
						<assign>
							<value>
								<index>
									<value>occurences</value>
									<value>x</value>
								</index>
							</value>
							<value>
								<new>
									<type>
										<template-call>
											<value>Vector</value>
											<value>Int</value>
										</template-call>
									</type>
									<parameters/>
								</new>
							</value>
						</assign>
					</code>
				</foreach>
				<try-block>
					<try>
						<code>
							<comment>\SParse\Sit</comment>
							<assign>
								<value>cleanExpr</value>
								<value>
									<call>
										<function>parseExpr</function>
										<parameters>
											<parameter>flua_string_10</parameter>
											<parameter>occurences</parameter>
										</parameters>
									</call>
								</value>
							</assign>
							<comment>\S12\S+\S_1</comment>
							<comment>\S\S\S\S\S\S34\S*\S56\S-&gt;\S_1</comment>
							<comment>\S12\S+\S34\S*\S56</comment>
							<comment>\S==================</comment>
							<comment>\SCheck\Sall\Soperator\Slevels</comment>
							<foreach>
								<iterator>level</iterator>
								<collection>opLevels</collection>
								<code>
									<foreach>
										<iterator>op</iterator>
										<collection>level</collection>
										<code>
											<foreach>
												<iterator>occ</iterator>
												<collection>
													<index>
														<value>occurences</value>
														<value>
															<access>
																<value>op</value>
																<value>text</value>
															</access>
														</value>
													</index>
												</collection>
												<code>
													<call>
														<function>print</function>
														<parameters>
															<parameter>
																<add>
																	<value>
																		<add>
																			<value>
																				<call>
																					<function>getLeftOperator</function>
																					<parameters>
																						<parameter>cleanExpr</parameter>
																						<parameter>occ</parameter>
																					</parameters>
																				</call>
																			</value>
																			<value>
																				<access>
																					<value>op</value>
																					<value>text</value>
																				</access>
																			</value>
																		</add>
																	</value>
																	<value>
																		<call>
																			<function>getRightOperator</function>
																			<parameters>
																				<parameter>cleanExpr</parameter>
																				<parameter>
																					<add>
																						<value>occ</value>
																						<value>
																							<access>
																								<value>
																									<access>
																										<value>op</value>
																										<value>text</value>
																									</access>
																								</value>
																								<value>lengthInBytes</value>
																							</access>
																						</value>
																					</add>
																				</parameter>
																			</parameters>
																		</call>
																	</value>
																</add>
															</parameter>
														</parameters>
													</call>
												</code>
											</foreach>
										</code>
									</foreach>
								</code>
							</foreach>
						</code>
					</try>
					<catch>
						<variable>
							<declare-type>
								<value>e</value>
								<value>KeyNotFoundException</value>
							</declare-type>
						</variable>
						<code>
							<call>
								<function>print</function>
								<parameters>
									<parameter>
										<add>
											<value>
												<access>
													<value>e</value>
													<value>key</value>
												</access>
											</value>
											<value>flua_string_11</value>
										</add>
									</parameter>
								</parameters>
							</call>
						</code>
					</catch>
				</try-block>
			</code>
		</test>
	</code>
</module>
